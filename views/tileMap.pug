extends ./type/SVG

mixin Layer(layer)
  g.layer(id=layer.id name=layer.name)
    switch(layer.type){

    }

block SVG
  - const revTilesets = tilesets.slice().reverse()
  - function getTidUrl(tid){
  -   let tileset = revTilesets.find(function(ts,idx){
  -     return ts.firstgid <= tid
  -   })
  -   if( tid < tileset.firstgid )throw new Error(`TID: ${tid} ${JSON.stringify(tileset)}`)
  -   let id = (tid -tileset.firstgid)+1
  -    return `${tileset.source.replace('.json','.ts.svg')}#${id}`
  -  }

  - function getX(cnt, w = width){
  -   return ((cnt) % w) * tilewidth
  - }

  - function getY(cnt, w = width, th = tileheight){
  -   return Math.floor((cnt)/w ) * th
  - }
  script(type="text/json")
    != json
  g.map()
    each layer in layers
      g.layer(id=layer.id name=layer.name)
        if layer.data
          each item, cnt in layer.data
            if item!=0
              image.cell(xlink:href=getTidUrl(item) x=getX(cnt) y=getY(cnt) width=tilewidth height=tileheight)
        else if layer.chunks
          each chunk, chunkCnt in layer.chunks
            g.chunk(transform=`translate(${chunk.x*tilewidth} ${chunk.y*tileheight})`)
              each item, cnt in chunk.data
                if item!=0
                  image.cell(xlink:href=getTidUrl(item) x=getX(cnt,chunk.width) y=getY(cnt,chunk.width) width=tilewidth height=tileheight)
        else if layer.layers
          each sublayer in layer.layers